# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
 
AWSTemplateFormatVersion: 2010-09-09

Description: MSK Cluster with required properties.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  PrivateSubnet1:
    Description: First subnet for MSK broker
    Type: String
  PrivateSubnet2:
    Description: Second subnet for MSK broker
    Type: String
    
Resources:
  MSKCluster:
    Type: 'AWS::MSK::Cluster'
    Properties:
      ClusterName: !Ref EnvironmentName
      KafkaVersion: 2.6.1
      NumberOfBrokerNodes: 2
      BrokerNodeGroupInfo:
        InstanceType: kafka.t3.small
        ClientSubnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      ClientAuthentication:
        Sasl:
          Scram:
            Enabled: true

# Below section implement custom resource backed on Lambda to return MSK bootstrap brokers
  BootstrapBrokersFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/cfn-msk-bootstrap-brokers-${EnvironmentName}"
      RetentionInDays: 30
  
  BootstrapBrokersFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cfn-msk-bootstrap-brokers-role-${EnvironmentName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/service-role/'
      Policies:
      - PolicyName: !Sub "cfn-msk-bootstrap-brokers-policy-${EnvironmentName}"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogGroup
              - logs:PutLogEvents
            Resource: !GetAtt BootstrapBrokersFunctionLogs.Arn
          - Effect: Allow
            Action:
              - kafka:GetBootstrapBrokers
            Resource: !Ref MSKCluster
            
  BootstrapBrokersFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import cfnresponse
          import boto3
          
          client = boto3.client('kafka')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
            
          def lambda_handler(event, context):
            logger.info(event)
            responseStatus = cfnresponse.FAILED
            responseData = {}
            try:
                ClusterArn = event['ResourceProperties']['ClusterArn']
                response = client.get_bootstrap_brokers(
                    ClusterArn=ClusterArn
                )
                logger.info(response)
                if (response['ResponseMetadata']['HTTPStatusCode'] == 200):
                    responseStatus = cfnresponse.SUCCESS
                    responseData['BootstrapBrokerStringSaslScram'] = response['BootstrapBrokerStringSaslScram']
                
            except Exception:
                logger.exception('Signaling failure to CloudFormation.')
            
            cfnresponse.send(event, context, responseStatus, responseData)
            return
      FunctionName: !Sub "cfn-msk-bootstrap-brokers-${EnvironmentName}"
      Handler: index.lambda_handler
      Role: !GetAtt BootstrapBrokersFunctionExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30
      
  BootstrapBrokers:
    Type: Custom::Function
    Properties:
      ServiceToken: !GetAtt BootstrapBrokersFunction.Arn
      ClusterArn: !Ref MSKCluster
      
Outputs:
  MSKClusterArn:
    Description: ARN of created MSK cluster
    Value: !Ref MSKCluster
  BootstrapServers:
    Description: MSK Bootstrap Servers
    Value: !GetAtt BootstrapBrokers.BootstrapBrokerStringSaslScram