# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09

Description: Creates required resources for managing MSK SASL/SCRAM authentication 

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  MSKClusterArn:
    Description: MSK cluster ARN
    Type: String
  MSKUsername:
    Description: Username for Amazon MSK SASL/SCRAM authentication. Password will be set automatically, and is accessible via AWS Secrets Manager
    Type: String
    
Resources:

  # Create IAM role allowing AWS IoT permissions to assume it. Policy will be attached later
  IoTMSKSecretRuleRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for the IoT Rules engine to use when accessing MSK credentials in Secrets Manager
      RoleName: !Sub "IoT-Rule-MSK-Role-${EnvironmentName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  
  # Create Symmetric Key to encrypt MSK access password
  SymmetricKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Symmetric CMK to be used by Sasl secret
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub "MSK_Secret_CMK_${EnvironmentName}"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt IoTMSKSecretRuleRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
  
  # Create secret to hold the MSK password. Secret name MUST start with AmazonMSK_
  SaslSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is the secret for MSK SASL/SCRAM authentication. This secret has a dynamically generated secret password. Secret name MUST start with AmazonMSK_
      Name: !Sub "AmazonMSK_secret_${EnvironmentName}"
      GenerateSecretString:
        PasswordLength: 8
        ExcludeCharacters: '"@/\'
        SecretStringTemplate: !Sub '{"username": "${MSKUsername}"}'
        GenerateStringKey: 'password'
      KmsKeyId: !Ref SymmetricKey

  # Create inline policy allowing AWS IoT access to the secret. Attaching the policy to the role
  IoTMSKRuleSecretPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "IoT-Rule-MSK-policy-${EnvironmentName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
            Resource: !Ref SaslSecret
      Roles:
        - !Ref IoTMSKSecretRuleRole
  
  SecretAssociationFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/cfn-msk-secret-association-${EnvironmentName}"
      RetentionInDays: 30
  
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cfn-msk-secret-association-role-${EnvironmentName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/service-role/'
      Policies:
      - PolicyName: !Sub "cfn-msk-secret-association-policy-${EnvironmentName}"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogGroup
              - logs:PutLogEvents
            Resource: !GetAtt SecretAssociationFunctionLogs.Arn
          - Effect: Allow
            Action:
              - kafka:BatchAssociateScramSecret
              - kafka:BatchDisassociateScramSecret
            Resource: !Ref MSKClusterArn
          - Effect: Allow
            Action:
              - kms:CreateGrant
            Resource: !GetAtt SymmetricKey.Arn
            
  MSKSecretAssociationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import cfnresponse
          import boto3
          
          client = boto3.client('kafka')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def associate(ClusterArn, SecretArn):
            response = client.batch_associate_scram_secret(
                ClusterArn=ClusterArn,
                SecretArnList=[SecretArn]
            )
            logger.info(response)
            logger.info('Secret associated!')
            return response['ResponseMetadata']['HTTPStatusCode']
          
          def disassociate(ClusterArn, SecretArn):
            response = client.batch_disassociate_scram_secret(
                ClusterArn=ClusterArn,
                SecretArnList=[SecretArn]
            )
            
            logger.info(response)
            logger.info('Secret disassociated!')
            return response['ResponseMetadata']['HTTPStatusCode']
            
          def lambda_handler(event, context):
            logger.info(event)
            responseStatus = cfnresponse.FAILED
            try:
                ClusterArn = event['ResourceProperties']['ClusterArn']
                SecretArn  = event['ResourceProperties']['SecretArn']
                if event['RequestType'] == 'Create':
                    if (associate(ClusterArn, SecretArn) == 200):
                        responseStatus = cfnresponse.SUCCESS
                elif event['RequestType'] == 'Delete':
                    if (disassociate(ClusterArn, SecretArn) == 200):
                        responseStatus = cfnresponse.SUCCESS
                elif event['RequestType'] == 'Update':
                    OldClusterArn = event['OldResourceProperties']['ClusterArn']
                    OldSecretArn  = event['OldResourceProperties']['SecretArn']
                    if (disassociate(OldClusterArn, OldSecretArn) == 200):
                        if (associate(ClusterArn, SecretArn) == 200):
                            responseStatus = cfnresponse.SUCCESS
                else:
                    logger.error('Unsupported RequestType %s. Signaling failure to CloudFormation.', event['RequestType'])
                    
            except Exception:
                logger.exception('Signaling failure to CloudFormation.')
            
            cfnresponse.send(event, context, responseStatus, {})
            return
      FunctionName: !Sub "cfn-msk-secret-association-${EnvironmentName}"
      Handler: index.lambda_handler
      Role: !GetAtt FunctionExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30
      
  SecretAssociation:
    Type: Custom::Function
    Properties:
      ServiceToken: !GetAtt MSKSecretAssociationFunction.Arn
      ClusterArn: !Ref MSKClusterArn
      SecretArn: !Ref SaslSecret
      
Outputs:
  IoTMSKSecretRuleRole:
    Description: Logical ID of IAM role to be used by IoT rule Kafka action to access the MSK credentials secret
    Value: !Ref IoTMSKSecretRuleRole